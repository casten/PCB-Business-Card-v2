#pragma once

#include <stdint.h>

#define LED_OFF   0x000000
#define RED_MASK   0x00FF00
#define BLUE_MASK  0x0000FF
#define GREEN_MASK 0xFF0000
#define RED_VAL(x) ((x >> 8) & 0xFF)
#define BLUE_VAL(x) (x & 0xFF)
#define GREEN_VAL(x) ((x >> 16) & 0xFF)

static const uint8_t colorList[9][3] =  {
  {0,255,0}, // Red
  {255,0,0}, // Green
  {0,0,255}, // Blue
  {170,255,0}, // Yellow
  {34,255,0}, // Orange
  {0,153,255}, // Purple
  {51,255,119}, // Pink
  {0,255,255}, // Cyan
  {255,255,255}  // White
};

static const uint8_t sineTable[256] = { // Adjusted for brightness
  16,16,17,17,18,18,18,19,19,20,20,20,21,21,21,22,
  22,22,23,23,24,24,24,25,25,25,26,26,26,26,27,27,
  27,28,28,28,28,29,29,29,29,30,30,30,30,30,30,31,
  31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,
  32,32,32,32,32,32,32,32,32,32,32,31,31,31,31,31,
  31,31,30,30,30,30,30,30,29,29,29,29,28,28,28,28,
  27,27,27,26,26,26,26,25,25,25,24,24,24,23,23,22,
  22,22,21,21,21,20,20,20,19,19,18,18,18,17,17,16,
  16,16,15,15,14,14,14,13,13,12,12,12,11,11,11,10,
  10,10,9,9,8,8,8,7,7,7,6,6,6,6,5,5,
  5,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,
  1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
  1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,
  5,5,5,6,6,6,6,7,7,7,8,8,8,9,9,10,
  10,10,11,11,11,12,12,12,13,13,14,14,14,15,15,16
};

static const uint8_t fastSine[64] = {
  16,18,19,21,22,24,25,26,
  27,28,29,30,31,31,32,32,
  32,32,32,31,31,30,29,28,
  27,26,25,24,22,21,19,18,
  16,14,13,11,10,8,7,6,
  5,4,3,2,1,1,0,0,
  0,0,0,1,1,2,3,4,
  5,6,7,8,10,11,13,14
};

static uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
    return ((uint32_t)g << 16) | ((uint32_t)r << 8) | b;
}

/*
 * Put a value 0 to 255 in to get a color value.
 * The colours are a transition r -> g -> b -> back to r
 * Inspired by the Adafruit examples.
 */
static uint32_t color_wheel(uint8_t pos) {
  pos = 255 - pos;
  if (pos < 85) {
    return ((uint32_t)(255 - pos * 3) << 16) | ((uint32_t)(0) << 8) | (pos * 3);
  } else if(pos < 170) {
    pos -= 85;
    return ((uint32_t)(0) << 16) | ((uint32_t)(pos * 3) << 8) | (255 - pos * 3);
  } else {
    pos -= 170;
    return ((uint32_t)(pos * 3) << 16) | ((uint32_t)(255 - pos * 3) << 8) | (0);
  }
}